// This is your Prisma schema file adapted for MySQL with,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  firstName String?
  lastName  String?
  img       String    @default("")
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blogs     Blog[] // Updated relation to 'blogs'
  vehicles  Vehicle[] // Updated relation to 'vehicles'
  service   Service[]

  @@map(name: "user")
}

model Blog {
  id        String    @id @default(cuid())
  title     String
  img       String
  content   String    @db.Text
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[] // Updated relation to 'comments'
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map(name: "blog")
}

enum VehicleType {
  SUV
  BUS
  VAN
  SEDAN
}

enum ReservationStatus {
  PENDING
  COMPLETED
  REJECTED
}

model Vehicle {
  id            String      @id @default(cuid())
  name          String
  model         String      @default("")
  img           String
  description   String      @db.Text
  speed         Float       @default(1)
  automatic     Int         @default(1)
  heatedSeat    Int         @default(1)
  gpsNavigation Int         @default(1)
  pricePerDay   Float
  type          VehicleType
  passengerSize Int
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  books         Book[] // Updated relation to 'books'
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map(name: "vehicle")
}

model Book {
  id           String            @id @default(cuid())
  firstName    String
  lastName     String
  fromAddress  String
  toAddress    String
  email        String
  phoneNumber  String
  luggageCount Int
  personCount  Int
  journeyDate  DateTime
  description  String            @db.Text
  driverGender String
  status       ReservationStatus @default(PENDING)
  vehicleId    String
  vehicle      Vehicle           @relation(fields: [vehicleId], references: [id])
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map(name: "book")
}

model Comment {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  comment   String   @db.Text
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "comment")
}

model Service {
  id        String   @id @default(cuid())
  title     String
  img       String
  content   String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "service")
}
