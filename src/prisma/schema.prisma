// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  firstName String?
  lastName  String?
  img       String    @default("")
  email     String    @unique
  password  String
  blog      Blog[]
  vehicle   Vehicle[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Service   Service[]
}

model Blog {
  id        String    @id @default(cuid())
  title     String
  img       String
  content   String    @db.Text
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  // published Boolean @default(false)
  blog      Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id        String   @id @default(cuid())
  title     String
  img       String
  content   String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // published Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VehicleType {
  SUV
  BUS
  VAN
  SEDAN
}

enum ReservationStatus {
  PENDING
  COMPLETED
  REJECTED
}

model Vehicle {
  id            String      @id @default(cuid())
  name          String
  model         String
  img           String
  description   String      @db.Text
  speed         Float
  automatic     Int         @default(1)
  heatedSeat    Int         @default(1)
  gpsNavigation Int         @default(1)
  pricePerDay   Float
  type          VehicleType
  passengerSize Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  books         Book[]
}

model Book {
  id           String            @id @default(cuid())
  firstName    String
  lastName     String
  fromAddress  String
  toAddress    String
  email        String
  phoneNumber  String
  luggageCount Int
  personCount  Int
  journeyDate  DateTime
  description  String            @db.Text
  status       ReservationStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  vehicle      Vehicle           @relation(fields: [vehicleId], references: [id])
  vehicleId    String
}

model Comment {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  comment   String   @db.Text
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
